⟨Letter⟩ ::= [A-Za-z]
⟨Digit⟩ ::= [0-9]
⟨Printable⟩ ::= [\x20-\x7E]
⟨Type⟩ ::= ‘int’ | ‘real’ | ‘bool’ | ‘char’ | ‘string’ | ‘unit’
⟨BooleanLiteral⟩ ::= ‘true’ | ‘false’
⟨IntegerLiteral⟩ ::= ⟨Digit⟩ { ⟨Digit⟩ }
⟨RealLiteral⟩ ::= ⟨Digit⟩ { ⟨Digit⟩ } ‘.’ ⟨Digit⟩ { ⟨Digit⟩ } [ ( ‘e’ | ‘E’ ) [ ( ‘+’ | ‘-’ ) ] ⟨Digit⟩ { ⟨Digit⟩ } ]
⟨CharLiteral⟩ ::= ‘’’ [ ⟨Printable⟩ ] ‘’’
⟨StringLiteral⟩ ::= ‘"’ { ⟨Printable⟩ } ‘"’
⟨UnitLiteral⟩ ::= ‘#’
⟨Literal⟩ ::= ⟨BooleanLiteral⟩ | ⟨IntegerLiteral⟩ | ⟨RealLiteral⟩ | ⟨CharLiteral⟩ | ⟨StringLiteral⟩ | ⟨UnitLiteral⟩
⟨Identifier⟩ ::= (‘_’|⟨Letter⟩){‘_’|⟨Letter⟩|⟨Digit⟩}
⟨MultiplicativeOp⟩ ::= ‘*’ | ‘/’ | ‘and’
⟨AdditiveOp⟩ ::= ‘+’|‘-’|‘or’
⟨RelationalOp⟩ ::= ‘<’|‘>’|‘==’|‘!=’|‘<=’|‘>=’

⟨ActualParams⟩ ::= ⟨Expression⟩ { ‘,’ ⟨Expression⟩ }
⟨FunctionCall⟩ ::= ⟨Identifier⟩ ‘(’ [ ⟨ActualParams⟩ ] ‘)’
⟨TypeCast⟩ ::= ‘(’ ⟨Type⟩ ‘)’ ⟨Expression⟩
⟨SubExpression⟩ ::= ‘(’ ⟨Expression⟩ ‘)’

⟨Unary⟩ ::= ( ‘+’ | ‘-’ | ‘not’ ) ⟨Expression⟩
⟨Factor⟩ ::= ⟨Literal⟩ | ⟨Identifier⟩ | ⟨FunctionCall⟩ | ⟨TypeCast⟩ | ⟨SubExpression⟩ | ⟨Unary⟩
⟨Term⟩ ::= ⟨Factor⟩ { ⟨MultiplicativeOp⟩ ⟨Factor⟩ }
⟨SimpleExpression⟩ ::= ⟨Term⟩ { ⟨AdditiveOp⟩ ⟨Term⟩ }
⟨Expression⟩ ::= ⟨SimpleExpression⟩ { ⟨RelationalOp⟩ ⟨SimpleExpression⟩ }
⟨Assignment⟩ ::= ‘set’ ⟨Identifier⟩ ‘<-’ ⟨Expression⟩
⟨VariableDecl⟩ ::= ‘let’ ⟨Identifier⟩ ‘:’ ⟨Type⟩ ‘=’ ⟨Expression⟩ ( ‘;’ | [ ‘in’ ⟨Block⟩ ] )

⟨FormalParam⟩ ::= ⟨Identifier⟩ ‘:’ ⟨Type⟩
⟨FormalParams⟩ ::= ⟨FormalParam⟩ { ‘,’ ⟨FormalParam⟩ }
⟨FunctionDecl⟩ ::= ‘function’ ⟨Identifier⟩ ‘(’ [ ⟨FormalParams⟩ ] ‘)’ ‘:’ ⟨Type⟩ ⟨Block⟩
⟨ReadStatement⟩ ::= ‘read’ ⟨Identifier⟩
⟨WriteStatement⟩ ::= ‘write’ ⟨Identifier⟩
⟨IfStatement⟩ ::= ‘if’ ‘(’ ⟨Expression⟩ ‘)’ ⟨Statement⟩ [ ‘else’ ⟨Statement⟩ ]
⟨WhileStatement⟩ ::= ‘while’ ‘(’ ⟨Expression⟩ ‘)’ ⟨Statement⟩
⟨HaltStatement⟩ ::= ‘halt’ [ ⟨IntegerLiteral⟩ | ⟨Identifier⟩ ]
⟨Statement⟩ ::= ⟨FunctionDecl⟩
            | ⟨Assignment⟩ ‘;’
            | ⟨Expression⟩ ‘;’
            | ⟨VariableDecl⟩
            | ⟨ReadStatement⟩ ‘;’
            | ⟨WriteStatement⟩ ‘;’
            | ⟨IfStatement⟩
            | ⟨WhileStatement⟩
            | ⟨HaltStatement⟩ ‘;’
            | ⟨Block⟩
⟨Block⟩ ::= ‘{’ { ⟨Statement⟩ } ‘}’
⟨Sxl⟩ ::= { ⟨Statement⟩ }

