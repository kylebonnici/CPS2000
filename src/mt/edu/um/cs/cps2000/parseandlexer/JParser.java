
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

package mt.edu.um.cs.cps2000.parseandlexer;

import com.sun.java_cup.internal.runtime.Symbol;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JParserSym.class;
}

  /** Default constructor. */
  public JParser() {super();}

  /** Constructor which sets the default scanner. */
  public JParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\005\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\010\012\000\002\010" +
    "\011\000\002\031\005\000\002\031\003\000\002\032\005" +
    "\000\002\011\006\000\002\012\005\000\002\012\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\025\006\000\002\025\005\000\002\026\006\000\002\027" +
    "\005\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\033\005\000\002\033\003\000\002\013\011\000" +
    "\002\013\012\000\002\015\004\000\002\014\004\000\002" +
    "\016\010\000\002\017\004\000\002\017\002\000\002\020" +
    "\007\000\002\021\004\000\002\021\004\000\002\021\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\052\005\053\006\021\007\052\010\023\011" +
    "\010\012\005\013\050\015\033\016\014\024\013\026\025" +
    "\031\026\032\043\033\041\034\017\035\006\036\051\037" +
    "\024\042\044\045\034\001\002\000\060\002\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\024\ufffa\025\ufffa\026\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\042\ufffa\045" +
    "\ufffa\046\ufffa\001\002\000\030\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\023\uffdd\027\uffdd\040\uffdd\041" +
    "\uffdd\044\uffdd\001\002\000\004\005\152\001\002\000\030" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023" +
    "\uffe4\027\uffe4\040\uffe4\041\uffe4\044\uffe4\001\002\000\030" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023" +
    "\uffde\027\uffde\040\uffde\041\uffde\044\uffde\001\002\000\030" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023" +
    "\uffe7\027\uffe7\040\uffe7\041\uffe7\044\uffe7\001\002\000\060" +
    "\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\001\002\000\052\005\053" +
    "\006\021\007\052\010\023\011\010\012\005\013\050\015" +
    "\033\016\014\024\013\026\025\031\026\032\043\033\041" +
    "\034\017\035\006\036\051\037\024\042\044\045\034\001" +
    "\002\000\030\005\053\006\021\007\052\010\023\011\010" +
    "\012\005\013\050\015\033\016\014\026\025\037\024\001" +
    "\002\000\004\021\146\001\002\000\060\002\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\024\ufff6\025\ufff6\026\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\042\ufff6\045" +
    "\ufff6\046\ufff6\001\002\000\004\005\145\001\002\000\030" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023" +
    "\uffe3\027\uffe3\040\uffe3\041\uffe3\044\uffe3\001\002\000\030" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023" +
    "\uffe1\027\uffe1\040\uffe1\041\uffe1\044\uffe1\001\002\000\004" +
    "\021\144\001\002\000\030\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\023\uffdf\027\uffdf\040\uffdf\041\uffdf" +
    "\044\uffdf\001\002\000\030\005\053\006\021\007\052\010" +
    "\023\011\010\012\005\013\050\015\033\016\014\026\025" +
    "\037\024\001\002\000\032\004\136\005\053\006\021\007" +
    "\052\010\023\011\010\012\005\013\050\015\033\016\014" +
    "\026\025\037\024\001\002\000\010\005\135\007\134\021" +
    "\uffc8\001\002\000\060\002\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd\016\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\042\ufffd\045\ufffd\046\ufffd\001" +
    "\002\000\004\021\133\001\002\000\004\002\132\001\002" +
    "\000\030\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\023\uffe2\027\uffe2\040\uffe2\041\uffe2\044\uffe2\001\002" +
    "\000\030\005\053\006\021\007\052\010\023\011\010\012" +
    "\005\013\050\015\033\016\014\026\025\037\024\001\002" +
    "\000\004\026\122\001\002\000\030\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\027\uffe5\040\uffe5" +
    "\041\uffe5\044\uffe5\001\002\000\004\021\121\001\002\000" +
    "\056\002\uffff\005\053\006\021\007\052\010\023\011\010" +
    "\012\005\013\050\015\033\016\014\024\013\025\uffff\026" +
    "\025\031\026\032\043\033\041\034\017\035\006\036\051" +
    "\037\024\042\044\045\034\001\002\000\030\014\uffea\015" +
    "\114\016\115\017\uffea\020\uffea\021\uffea\023\uffea\027\uffea" +
    "\040\116\041\uffea\044\uffea\001\002\000\004\005\112\001" +
    "\002\000\004\021\111\001\002\000\004\026\105\001\002" +
    "\000\004\005\075\001\002\000\030\014\073\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\023\uffec\027\uffec\040\uffec" +
    "\041\uffec\044\uffec\001\002\000\060\002\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\016\ufff7\024\ufff7\025\ufff7\026\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\042\ufff7\045\ufff7" +
    "\046\ufff7\001\002\000\030\014\uffe8\015\uffe8\016\uffe8\017" +
    "\070\020\071\021\uffe8\023\uffe8\027\uffe8\040\uffe8\041\067" +
    "\044\uffe8\001\002\000\030\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\023\uffdc\027\uffdc\040\uffdc\041\uffdc" +
    "\044\uffdc\001\002\000\004\005\063\001\002\000\030\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0" +
    "\027\uffe0\040\uffe0\041\uffe0\044\uffe0\001\002\000\032\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6" +
    "\026\054\027\uffe6\040\uffe6\041\uffe6\044\uffe6\001\002\000" +
    "\032\005\053\006\021\007\052\010\023\011\010\012\005" +
    "\013\050\015\033\016\014\026\025\027\055\037\024\001" +
    "\002\000\030\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\023\uffda\027\uffda\040\uffda\041\uffda\044\uffda\001" +
    "\002\000\004\027\062\001\002\000\006\023\060\027\uffd3" +
    "\001\002\000\030\005\053\006\021\007\052\010\023\011" +
    "\010\012\005\013\050\015\033\016\014\026\025\037\024" +
    "\001\002\000\004\027\uffd4\001\002\000\030\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\027\uffdb" +
    "\040\uffdb\041\uffdb\044\uffdb\001\002\000\004\030\064\001" +
    "\002\000\030\005\053\006\021\007\052\010\023\011\010" +
    "\012\005\013\050\015\033\016\014\026\025\037\024\001" +
    "\002\000\004\021\uffee\001\002\000\030\005\053\006\021" +
    "\007\052\010\023\011\010\012\005\013\050\015\033\016" +
    "\014\026\025\037\024\001\002\000\030\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016" +
    "\uffc2\026\uffc2\037\uffc2\001\002\000\030\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016" +
    "\uffc4\026\uffc4\037\uffc4\001\002\000\030\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016" +
    "\uffc3\026\uffc3\037\uffc3\001\002\000\030\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\023\uffe9\027\uffe9\040" +
    "\uffe9\041\uffe9\044\uffe9\001\002\000\030\005\053\006\021" +
    "\007\052\010\023\011\010\012\005\013\050\015\033\016" +
    "\014\026\025\037\024\001\002\000\030\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\023\uffed\027\uffed\040" +
    "\uffed\041\uffed\044\uffed\001\002\000\004\022\076\001\002" +
    "\000\004\004\077\001\002\000\004\043\100\001\002\000" +
    "\030\005\053\006\021\007\052\010\023\011\010\012\005" +
    "\013\050\015\033\016\014\026\025\037\024\001\002\000" +
    "\006\021\103\044\102\001\002\000\004\024\013\001\002" +
    "\000\060\002\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\042\uffd2\045\uffd2\046\uffd2\001\002\000\060" +
    "\002\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\015\uffd1\016\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\042\uffd1\045\uffd1\046\uffd1\001\002\000\030\005\053" +
    "\006\021\007\052\010\023\011\010\012\005\013\050\015" +
    "\033\016\014\026\025\037\024\001\002\000\004\027\107" +
    "\001\002\000\052\005\053\006\021\007\052\010\023\011" +
    "\010\012\005\013\050\015\033\016\014\024\013\026\025" +
    "\031\026\032\043\033\041\034\017\035\006\036\051\037" +
    "\024\042\044\045\034\001\002\000\060\002\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015" +
    "\uffcb\016\uffcb\024\uffcb\025\uffcb\026\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\042\uffcb\045" +
    "\uffcb\046\uffcb\001\002\000\060\002\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\042\ufff8\045\ufff8\046" +
    "\ufff8\001\002\000\004\021\uffcf\001\002\000\030\005\053" +
    "\006\021\007\052\010\023\011\010\012\005\013\050\015" +
    "\033\016\014\026\025\037\024\001\002\000\030\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015" +
    "\uffc7\016\uffc7\026\uffc7\037\uffc7\001\002\000\030\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015" +
    "\uffc6\016\uffc6\026\uffc6\037\uffc6\001\002\000\030\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015" +
    "\uffc5\016\uffc5\026\uffc5\037\uffc5\001\002\000\030\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb\027" +
    "\uffeb\040\uffeb\041\uffeb\044\uffeb\001\002\000\006\002\001" +
    "\025\001\001\002\000\060\002\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb\045\ufffb\046\ufffb" +
    "\001\002\000\030\005\053\006\021\007\052\010\023\011" +
    "\010\012\005\013\050\015\033\016\014\026\025\037\024" +
    "\001\002\000\004\027\124\001\002\000\052\005\053\006" +
    "\021\007\052\010\023\011\010\012\005\013\050\015\033" +
    "\016\014\024\013\026\025\031\026\032\043\033\041\034" +
    "\017\035\006\036\051\037\024\042\044\045\034\001\002" +
    "\000\060\002\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\042\uffcc\045\uffcc\046\127\001\002\000\060" +
    "\002\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\015\uffce\016\uffce\024\uffce\025\uffce\026\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\042\uffce\045\uffce\046\uffce\001\002\000\052\005\053" +
    "\006\021\007\052\010\023\011\010\012\005\013\050\015" +
    "\033\016\014\024\013\026\025\031\026\032\043\033\041" +
    "\034\017\035\006\036\051\037\024\042\044\045\034\001" +
    "\002\000\060\002\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\042\uffcd\045\uffcd\046\uffcd\001\002\000" +
    "\030\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\023\uffd7\027\uffd7\040\uffd7\041\uffd7\044\uffd7\001\002\000" +
    "\004\002\000\001\002\000\060\002\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\042\ufffc\045\ufffc\046" +
    "\ufffc\001\002\000\004\021\uffca\001\002\000\004\021\uffc9" +
    "\001\002\000\004\027\141\001\002\000\004\027\140\001" +
    "\002\000\030\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\023\uffd8\027\uffd8\040\uffd8\041\uffd8\044\uffd8\001" +
    "\002\000\030\005\053\006\021\007\052\010\023\011\010" +
    "\012\005\013\050\015\033\016\014\026\025\037\024\001" +
    "\002\000\030\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\027\uffd9\040\uffd9\041\uffd9\044\uffd9\001" +
    "\002\000\030\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\023\uffd5\027\uffd5\040\uffd5\041\uffd5\044\uffd5\001" +
    "\002\000\060\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\042\ufff9\045\ufff9\046\ufff9\001\002\000" +
    "\004\021\uffd0\001\002\000\060\002\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\042\ufff5\045\ufff5\046" +
    "\ufff5\001\002\000\030\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\023\uffd6\027\uffd6\040\uffd6\041\uffd6\044" +
    "\uffd6\001\002\000\004\025\151\001\002\000\060\002\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\015\ufffe\016\ufffe\024\ufffe\025\ufffe\026\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\042" +
    "\ufffe\045\ufffe\046\ufffe\001\002\000\004\026\153\001\002" +
    "\000\006\005\155\027\156\001\002\000\004\027\167\001" +
    "\002\000\004\022\165\001\002\000\004\022\162\001\002" +
    "\000\006\023\160\027\ufff0\001\002\000\004\005\155\001" +
    "\002\000\004\027\ufff1\001\002\000\004\004\163\001\002" +
    "\000\004\024\013\001\002\000\060\002\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2" +
    "\016\ufff2\024\ufff2\025\ufff2\026\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\042\ufff2\045\ufff2" +
    "\046\ufff2\001\002\000\004\004\166\001\002\000\006\023" +
    "\uffef\027\uffef\001\002\000\004\022\170\001\002\000\004" +
    "\004\171\001\002\000\004\024\013\001\002\000\060\002" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\015\ufff3\016\ufff3\024\ufff3\025\ufff3\026\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\042\ufff3\045\ufff3\046\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\052\004\030\005\011\006\036\007\010\010" +
    "\026\011\027\012\035\013\003\014\021\015\041\016\045" +
    "\020\015\021\014\022\044\023\037\024\046\025\034\026" +
    "\006\027\017\030\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\147" +
    "\005\011\006\036\007\010\010\026\011\027\012\035\013" +
    "\003\014\021\015\041\016\045\020\015\021\014\022\044" +
    "\023\037\024\046\025\034\026\006\027\017\030\031\001" +
    "\001\000\024\007\010\012\146\022\044\023\037\024\046" +
    "\025\034\026\006\027\017\030\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\010\012\142\022\044\023\037\024\046\025\034" +
    "\026\006\027\017\030\031\001\001\000\024\007\010\012" +
    "\136\022\044\023\037\024\046\025\034\026\006\027\017" +
    "\030\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\010\012\130\022\044\023\037\024\046\025\034\026" +
    "\006\027\017\030\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\117\005\011\006" +
    "\036\007\010\010\026\011\027\012\035\013\003\014\021" +
    "\015\041\016\045\020\015\021\014\022\044\023\037\024" +
    "\046\025\034\026\006\027\017\030\031\001\001\000\004" +
    "\003\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\010\012\056\022\044\023\037\024\046\025\034\026" +
    "\006\027\017\030\031\033\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\010\012" +
    "\056\022\044\023\037\024\046\025\034\026\006\027\017" +
    "\030\031\033\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\010\012\064\022\044" +
    "\023\037\024\046\025\034\026\006\027\017\030\031\001" +
    "\001\000\002\001\001\000\020\007\010\023\071\024\046" +
    "\025\034\026\006\027\017\030\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\010\022\073\023\037\024\046\025\034\026" +
    "\006\027\017\030\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\010\012\100\022\044\023\037\024\046\025\034\026\006" +
    "\027\017\030\031\001\001\000\002\001\001\000\004\005" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\010\012\105\022\044\023\037\024\046\025\034\026" +
    "\006\027\017\030\031\001\001\000\002\001\001\000\050" +
    "\005\011\006\107\007\010\010\026\011\027\012\035\013" +
    "\003\014\021\015\041\016\045\020\015\021\014\022\044" +
    "\023\037\024\046\025\034\026\006\027\017\030\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\010\022\116\023\037\024\046\025\034\026" +
    "\006\027\017\030\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\010\012\122\022\044" +
    "\023\037\024\046\025\034\026\006\027\017\030\031\001" +
    "\001\000\002\001\001\000\050\005\011\006\124\007\010" +
    "\010\026\011\027\012\035\013\003\014\021\015\041\016" +
    "\045\020\015\021\014\022\044\023\037\024\046\025\034" +
    "\026\006\027\017\030\031\001\001\000\004\017\125\001" +
    "\001\000\002\001\001\000\050\005\011\006\127\007\010" +
    "\010\026\011\027\012\035\013\003\014\021\015\041\016" +
    "\045\020\015\021\014\022\044\023\037\024\046\025\034" +
    "\026\006\027\017\030\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\010\012\141\022\044" +
    "\023\037\024\046\025\034\026\006\027\017\030\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\153\032\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\160" +
    "\032\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\171\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean useLineNumber = false;
  private Document doc;

  public void setDoc(Document doc) {
    this.doc = doc;
  }

  private Node generateNode(String type, String textContent){
    Node node = doc.createElement(type);
    node.setTextContent(textContent);
    ((Element)node).setAttribute("lineNumber",stack.peek().left + "");
    return node;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JParser$actions {
  private final JParser parser;

  /** Constructor */
  CUP$JParser$actions(JParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action_part00000000(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JParser$result;

      /* select the action based on the action number */
      switch (CUP$JParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sxl ::= statement sxl 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int sxleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node sx = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = sx; RESULT.insertBefore(s,RESULT.getFirstChild()); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("sxl",2, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sxl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		RESULT = start_val;
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JParser$parser.done_parsing();
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sxl ::= statement 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Slx"); RESULT.appendChild(s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("sxl",2, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= CURLY_BRACE_OPEN sxl CURLY_BRACE_CLOSE 
            {
              Node RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node sx = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = sx; doc.renameNode(RESULT, null, "Block"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= functionDecl 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Statement"); RESULT.appendChild(f); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= assignment SEMICOLON 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("Statement"); RESULT.appendChild(a); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= expression SEMICOLON 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("Statement");RESULT.appendChild(ex); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= variableDecl 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Statement"); RESULT.appendChild(v); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= readStatement SEMICOLON 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("Statement"); RESULT.appendChild(r); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= writeStatement SEMICOLON 
            {
              Node RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node wr = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("Statement");RESULT.appendChild(wr); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= ifStatement 
            {
              Node RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ifs = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Statement");RESULT.appendChild(ifs); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= whileStatement 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Statement");RESULT.appendChild(w); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= haltStatement SEMICOLON 
            {
              Node RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node h = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("Statement");RESULT.appendChild(h); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= block 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Statement");RESULT.appendChild(b); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionDecl ::= FUNCTION IDENTIFIER BRACE_OPEN formalParams BRACE_CLOSE COLON TYPE block 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("FunctionDecl");
                                                                                       RESULT.appendChild(generateNode("Identifier",id));
                                                                                       RESULT.appendChild(fp);
                                                                                       RESULT.appendChild(generateNode("Type",t));
                                                                                       RESULT.appendChild(b); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("functionDecl",6, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionDecl ::= FUNCTION IDENTIFIER BRACE_OPEN BRACE_CLOSE COLON TYPE block 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("FunctionDecl");
                                                                                        RESULT.appendChild(generateNode("Identifier",id));
                                                                                        RESULT.appendChild(doc.createElement("FormalParams"));
                                                                                        RESULT.appendChild(generateNode("Type",t));
                                                                                        RESULT.appendChild(b); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("functionDecl",6, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalParams ::= formalParam COMMA formalParams 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node fps = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = fps;
                                                          RESULT.insertBefore(fp,RESULT.getFirstChild()); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("formalParams",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formalParams ::= formalParam 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("FormalParams"); RESULT.appendChild(fp); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("formalParams",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formalParam ::= IDENTIFIER COLON TYPE 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("FormalParam");
                                              RESULT.appendChild(generateNode("Identifier",id));
                                              RESULT.appendChild(generateNode("Type",t)); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("formalParam",24, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment ::= SET IDENTIFIER TO expression 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Assignment");
                                                     RESULT.appendChild(generateNode("Identifier",id));
                                                     RESULT.appendChild(ex); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= simpleExpression RELATIONAL_OP simpleExpression 
            {
              Node RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Node s1 = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node s2 = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Expression");
                                                                           RESULT.appendChild(s1);
                                                                           RESULT.appendChild(generateNode("RelationalOp",op));
                                                                           RESULT.appendChild(s2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= simpleExpression 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Expression"); RESULT.appendChild(s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simpleExpression ::= term AdditiveOp simpleExpression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node op = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node se = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = se;
                                                                 RESULT.insertBefore(op,RESULT.getFirstChild());
                                                                 RESULT.insertBefore(t,RESULT.getFirstChild()); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simpleExpression ::= term 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("SimpleExpression"); RESULT.appendChild(t); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= factor MultiplicativeOp term 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node op = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = t;
                                                RESULT.insertBefore(op,RESULT.getFirstChild());
                                                RESULT.insertBefore(f,RESULT.getFirstChild()); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= factor 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Term"); RESULT.appendChild(f); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= literal 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Factor"); RESULT.appendChild(l); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Factor"); RESULT.appendChild(generateNode("Identifier",id)); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= functionCall 
            {
              Node RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node fc = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Factor"); RESULT.appendChild(fc); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= typeCast 
            {
              Node RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node tc = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Factor"); RESULT.appendChild(tc); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= subExpression 
            {
              Node RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node se = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Factor"); RESULT.appendChild(se); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= unary 
            {
              Node RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node u = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Factor"); RESULT.appendChild(u); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literal ::= BOOLEAN_LITERAL 
            {
              Node RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		RESULT = doc.createElement("Literal"); RESULT.appendChild(generateNode("BooleanLiteral",bl.toString()));
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literal ::= INTEGER_LITERAL 
            {
              Node RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		RESULT = doc.createElement("Literal"); RESULT.appendChild(generateNode("IntegerLiteral",il.toString()));
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literal ::= REAL_LITERAL 
            {
              Node RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double rl = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		RESULT = doc.createElement("Literal"); RESULT.appendChild(generateNode("RealLiteral",rl.toString()));
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= CHAR_LITERAL 
            {
              Node RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		RESULT = doc.createElement("Literal"); RESULT.appendChild(generateNode("CharLiteral",cl.toString().substring(1,cl.length()-1)));
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literal ::= STRING_LITERAL 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		RESULT = doc.createElement("Literal"); RESULT.appendChild(generateNode("StringLiteral",sl.toString().substring(1,sl.length()-1))); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal ::= UNIT_LITERAL 
            {
              Node RESULT =null;
		int ulleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int ulright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String ul = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		RESULT = doc.createElement("Literal"); RESULT.appendChild(generateNode("UnitLiteral",ul.toString()));
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // functionCall ::= IDENTIFIER BRACE_OPEN actualParams BRACE_CLOSE 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node ap = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("FunctionCall");
                                                                         RESULT.appendChild(generateNode("Identifier",id));
                                                                         RESULT.appendChild(ap); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("functionCall",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // functionCall ::= IDENTIFIER BRACE_OPEN BRACE_CLOSE 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		 RESULT = doc.createElement("FunctionCall");
                                                           RESULT.appendChild(generateNode("Identifier",id));
                                                           RESULT.appendChild(doc.createElement("ActualParams")); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("functionCall",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typeCast ::= BRACE_OPEN TYPE BRACE_CLOSE expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("TypeCast");
                                                            RESULT.appendChild(generateNode("Type",t));
                                                            RESULT.appendChild(ex); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("typeCast",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // subExpression ::= BRACE_OPEN expression BRACE_CLOSE 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("SubExpression");
                                                            RESULT.appendChild(ex); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("subExpression",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unary ::= PLUS expression 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Unary"); RESULT.setTextContent("+"); RESULT.appendChild(ex); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("unary",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unary ::= MINUS expression 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Unary"); ((Element)RESULT).setAttribute("op","-"); RESULT.appendChild(ex); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("unary",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unary ::= NOT expression 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("Unary"); RESULT.setTextContent("not"); RESULT.appendChild(ex); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("unary",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // actualParams ::= expression COMMA actualParams 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ap = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = ap;
                                                        RESULT.insertBefore(ex,RESULT.getFirstChild()); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("actualParams",25, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actualParams ::= expression 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("ActualParams");RESULT.appendChild(ex);
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("actualParams",25, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variableDecl ::= LET IDENTIFIER COLON TYPE EQ expression SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = doc.createElement("VariableDecl");
                                                                              RESULT.appendChild(generateNode("Identifier",id));
                                                                              RESULT.appendChild(generateNode("Type",t));
                                                                              RESULT.appendChild(e); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("variableDecl",9, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variableDecl ::= LET IDENTIFIER COLON TYPE EQ expression IN block 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("VariableDecl");
                                                                                  RESULT.appendChild(generateNode("Identifier",id));
                                                                                  RESULT.appendChild(generateNode("Type",t));
                                                                                  RESULT.appendChild(b); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("variableDecl",9, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // writeStatement ::= WRITE IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("WriteStatement"); RESULT.appendChild(generateNode("Identifier",id)); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("writeStatement",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // readStatement ::= READ IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("ReadStatement"); RESULT.appendChild(generateNode("Identifier",id)); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("readStatement",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ifStatement ::= IF BRACE_OPEN expression BRACE_CLOSE statement elseStatement 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node el = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("IfStatement");
                                                                                         RESULT.appendChild(ex);
                                                                                         RESULT.appendChild(s);
                                                                                         if (el!=null) RESULT.appendChild(el);
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ifStatement",12, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elseStatement ::= ELSE statement 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("elseStatement",13, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elseStatement ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("elseStatement",13, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // whileStatement ::= WHILE BRACE_OPEN expression BRACE_CLOSE statement 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("WhileStatement");
                                                                               RESULT.appendChild(ex);
                                                                               RESULT.appendChild(s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("whileStatement",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // haltStatement ::= HALT INTEGER_LITERAL 
            {
              Node RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("HaltStatement");Node child = doc.createElement("IntegerLiteral");  child.setTextContent(il.toString()); RESULT.appendChild(child); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("haltStatement",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // haltStatement ::= HALT IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = doc.createElement("HaltStatement"); RESULT.appendChild(generateNode("Identifier",id)); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("haltStatement",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // haltStatement ::= HALT 
            {
              Node RESULT =null;
		 RESULT = doc.createElement("HaltStatement"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("haltStatement",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AdditiveOp ::= PLUS 
            {
              Node RESULT =null;
		 RESULT = doc.createElement("AdditiveOp");  RESULT.setTextContent("+"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("AdditiveOp",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AdditiveOp ::= MINUS 
            {
              Node RESULT =null;
		 RESULT = doc.createElement("AdditiveOp");  RESULT.setTextContent("-"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("AdditiveOp",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AdditiveOp ::= OR 
            {
              Node RESULT =null;
		 RESULT = doc.createElement("AdditiveOp");  RESULT.setTextContent("or"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("AdditiveOp",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MultiplicativeOp ::= MULTIPLICATION 
            {
              Node RESULT =null;
		 RESULT = doc.createElement("MultiplicativeOp");  RESULT.setTextContent("*"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeOp",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MultiplicativeOp ::= DIVISION 
            {
              Node RESULT =null;
		 RESULT = doc.createElement("MultiplicativeOp");  RESULT.setTextContent("/"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeOp",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MultiplicativeOp ::= AND 
            {
              Node RESULT =null;
		 RESULT = doc.createElement("MultiplicativeOp");  RESULT.setTextContent("and"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeOp",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
              return CUP$JParser$do_action_part00000000(
                               CUP$JParser$act_num,
                               CUP$JParser$parser,
                               CUP$JParser$stack,
                               CUP$JParser$top);
    }
}

}
